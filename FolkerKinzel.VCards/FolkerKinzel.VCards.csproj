<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;net40</TargetFrameworks>
    <LangVersion>9.0</LangVersion>
    <Nullable>enable</Nullable>
    <NeutralLanguage>en</NeutralLanguage>
    <!-- .nuget-Package: -->
    <PackageId>FolkerKinzel.VCards</PackageId>
    <Product>FolkerKinzel.VCards</Product>
    <Version>2.1.0-beta</Version>
    <FileVersion>2.1.0.0</FileVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
<PackageReleaseNotes>
Most classes derived from VCard property have now an explicit implementation of IEnumerable{T} that enables them to be assigned to collection properties directly without being wrapped in an Array or List. This avoids the creation of most temporary collections and enables you to write shorter code when using the library.
      
Enables TYPE=PREF in the vCard 2.1 EMAIL property. (Although this is not mentioned in the standard, nevertheless it is widely supported.)
      
Fixes an issue that non-standardized parameter values in standardized parameters are not recognized by the library.
      
Fixes the issue that the SORT-AS parameter was not read.
</PackageReleaseNotes>
    <PackageTags>.net vcard vcf c#</PackageTags>
    <Description>
      .NET library to read, write and convert VCF files that match the vCard standards 2.1, 3.0 and 4.0.
    </Description>
    <Authors>Folker Kinzel</Authors>
    <Copyright>Copyright Â© 2020 Folker Kinzel</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageIcon>Logo.png</PackageIcon>
    <RepositoryUrl>https://github.com/FolkerKinzel/VCards.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/FolkerKinzel/VCards</PackageProjectUrl>
  </PropertyGroup>
  <!-- ðŸ‘‡ disable the nullable warnings when compiling for .NET 4.0 -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net40'">
    <NoWarn>$(NoWarn);8600;8601;8602;8603;8604</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="Intls\Serializers\Interfaces\**" />
    <Compile Remove="Models\Interfaces\**" />
    <Compile Remove="Translations\**" />
    <EmbeddedResource Remove="Intls\Serializers\Interfaces\**" />
    <EmbeddedResource Remove="Models\Interfaces\**" />
    <EmbeddedResource Remove="Translations\**" />
    <None Remove="Intls\Serializers\Interfaces\**" />
    <None Remove="Models\Interfaces\**" />
    <None Remove="Translations\**" />
  </ItemGroup>
  <ItemGroup>
    <Compile Remove="Intls\Deserializers\VcfRow.ParameterSplitter.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="..\..\..\Nuget-Logo\Logo.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Nullable" Version="1.3.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <Compile Update="Resources\Res.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Res.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="Resources\Res.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Res.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="if $(ConfigurationName) == Release copy /v /b /y &quot;$(OutDir)$(ProjectName).xml&quot; &quot;$(OutDir)de/$(ProjectName).xml&quot;&#xD;&#xA;if $(ConfigurationName) == Release if '$(TargetFramework)' == 'netstandard2.1' dotnet $(SolutionDir)IncVersion\IncVersion.dll $(ProjectDir)$(ProjectFileName) --revision" />
  </Target>
</Project>