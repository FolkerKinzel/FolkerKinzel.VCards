# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\Users\fkinz\source\repos\FolkerKinzel.VCards\FolkerKinzel.VCards\ codebase based on best match to current usage at 31.12.2020
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#csharp_indent_case_contents_when_block
csharp_indent_case_contents_when_block = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for properties, accessors, methods, control_blocks, lambdas, object_collection_array_initializers, and types (also known as "Allman" style)
csharp_new_line_before_open_brace = properties, accessors, methods, control_blocks, lambdas, object_collection_array_initializers, types

#Formatting - organize using options

#do not place System.* using directives before other using directives
dotnet_sort_system_directives_first = false

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on separate lines
csharp_preserve_single_line_blocks = false
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer curly braces even for one line of code
csharp_prefer_braces = true:suggestion

#Style - expression bodied member options

#prefer expression-bodied members for accessors
csharp_style_expression_bodied_accessors = true:suggestion
#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:none
#prefer block bodies for operators
csharp_style_expression_bodied_operators = false:suggestion
#prefer expression-bodied members for properties
csharp_style_expression_bodied_properties = true:suggestion

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer default over default(T)
csharp_prefer_simple_default_expression = true:suggestion
#prefer objects to not be initialized using object initializers
dotnet_style_object_initializer = false:suggestion

#Style - implicit and explicit types

#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:suggestion
#prefer explicit type over var to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = false:none
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - Miscellaneous preferences

#prefer local functions over anonymous functions
csharp_style_pattern_local_over_anonymous_function = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = protected,internal,private,public,override,virtual,static,readonly,abstract,sealed:suggestion

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = true:silent
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:silent
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = true:silent

# IDE0056: Indexoperator verwenden
dotnet_diagnostic.IDE0056.severity = none

# IDE0003: Qualifizierung entfernen
dotnet_style_qualification_for_event = false:suggestion



# IDE0057: Bereichsoperator verwenden
csharp_style_prefer_range_operator = false:suggestion

# CA1812: Nicht instanziierte interne Klassen vermeiden
dotnet_diagnostic.CA1812.severity = suggestion

# CA1012: Abstrakte Typen dürfen keine öffentlichen Konstruktoren enthalten
dotnet_diagnostic.CA1012.severity = suggestion

# CA1014: Assemblys mit CLSCompliant markieren
dotnet_diagnostic.CA1014.severity = suggestion

# CA1034: Geschachtelte Typen dürfen nicht sichtbar sein
dotnet_diagnostic.CA1034.severity = suggestion

# CA1044: Eigenschaften dürfen nicht lesegeschützt sein
dotnet_diagnostic.CA1044.severity = suggestion

# CA1062: Argumente von öffentlichen Methoden validieren
dotnet_diagnostic.CA1062.severity = suggestion

# CA1064: Ausnahmen müssen öffentlich sein
dotnet_diagnostic.CA1064.severity = suggestion

# CA1303: Literale nicht als lokalisierte Parameter übergeben
dotnet_diagnostic.CA1303.severity = suggestion

# CA1307: "StringComparison" zur Verdeutlichung angeben
dotnet_diagnostic.CA1307.severity = suggestion

# CA1713: Ereignisse dürfen kein Präfix "Before" oder "After" aufweisen.
dotnet_diagnostic.CA1713.severity = suggestion

# CA1721: Eigenschaftennamen dürfen nicht mit Get-Methoden übereinstimmen
dotnet_diagnostic.CA1721.severity = suggestion

# CA1724: Typnamen dürfen nicht mit Namespaces übereinstimmen
dotnet_diagnostic.CA1724.severity = suggestion

# CA1801: Nicht verwendete Parameter überprüfen
dotnet_diagnostic.CA1801.severity = warning

# CA1813: Nicht versiegelte Attribute vermeiden
dotnet_diagnostic.CA1813.severity = suggestion

# CA1819: Eigenschaften dürfen keine Arrays zurückgeben
dotnet_diagnostic.CA1819.severity = suggestion

# CA1820: Anhand der Zeichenfolgenlänge auf leere Zeichenfolgen prüfen
dotnet_diagnostic.CA1820.severity = suggestion

# CA1823: Nicht verwendete private Felder vermeiden
dotnet_diagnostic.CA1823.severity = warning

# CA2000: Objekte verwerfen, bevor Bereich verloren geht
dotnet_diagnostic.CA2000.severity = warning

# CA2007: Aufruf von "ConfigureAwait" für erwarteten Task erwägen
dotnet_diagnostic.CA2007.severity = suggestion

# CA2008: Keine Tasks ohne Übergabe eines TaskSchedulers erstellen
dotnet_diagnostic.CA2008.severity = suggestion

# CA2213: Verwerfbare Felder verwerfen
dotnet_diagnostic.CA2213.severity = warning

# CA2237: ISerializable-Typen mit "serializable" markieren
dotnet_diagnostic.CA2237.severity = suggestion

# CA2300: Nicht den unsicheren BinaryFormatter zur Deserialisierung verwenden
dotnet_diagnostic.CA2300.severity = suggestion

# CA2305: Nicht den unsicheren LosFormatter zur Deserialisierung verwenden
dotnet_diagnostic.CA2305.severity = suggestion

# CA2310: Nicht den unsicheren NetDataContractSerializer zur Deserialisierung verwenden
dotnet_diagnostic.CA2310.severity = suggestion

# CA2315: Nicht den unsicheren ObjectStateFormatter zur Deserialisierung verwenden
dotnet_diagnostic.CA2315.severity = suggestion

# CA2321: Nicht mit JavaScriptSerializer und SimpleTypeResolver deserialisieren
dotnet_diagnostic.CA2321.severity = suggestion

# CA2327: Keine unsicheren JsonSerializerSettings verwenden
dotnet_diagnostic.CA2327.severity = suggestion

# CA2328: Sicherheit von JsonSerializerSettings sicherstellen
dotnet_diagnostic.CA2328.severity = suggestion

# CA2329: JsonSerializer nicht zum Deserialisieren mit einer unsicheren Konfiguration verwenden
dotnet_diagnostic.CA2329.severity = suggestion

# CA2330: Bei der Deserialisierung mit JsonSerializer eine sichere Konfiguration sicherstellen
dotnet_diagnostic.CA2330.severity = suggestion

# IDE0022: Blocktextkörper für Methoden verwenden
dotnet_diagnostic.IDE0022.severity = none

[VCard_ctor.cs]
#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:silent

[ParameterSection_ctor.cs]
#prefer explicit type over var in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = false:silent
